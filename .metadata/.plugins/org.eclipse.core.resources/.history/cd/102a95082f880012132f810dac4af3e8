package com.subject17.jdfs.client.settings;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import com.subject17.jdfs.client.io.Printer;
import com.subject17.jdfs.client.user.User;

public class UserSettingsReader extends SettingsReader {
	private String filename;
	private String path;
	private File usersFile;
	
	Document usersDoc;
	
	private User activeUser;
	
	public UserSettingsReader(String pathloc, String fname) throws ParserConfigurationException, SAXException, IOException{
		path = pathloc;
		filename = fname;
		usersFile = new File(pathloc, fname);
		usersDoc = getUsersDocument();
	}
	
	private Document getUsersDocument() throws ParserConfigurationException, SAXException, IOException {
		return GetDocument(usersFile);
	}
	
	public ArrayList<User> getUsers() {
		ArrayList<User> users = new ArrayList<User>();
		
		NodeList lst = usersDoc.getElementsByTagName("user");
		for (int i = 0; i < lst.getLength(); ++i) {
			try {
				Element usr = (Element)lst.item(i);
				User user = new User(usr);
				users.add(user);
				if (isActive(usr))
					activeUser = user;
			}
			catch (Exception e){
				Printer.logErr("Could not read user, number "+i+" in list.");
				Printer.logErr(e);
			}
		}
		return users;
	}
	
	public User getActiveUser() {
		
	}
	
	public static boolean isActive(Element e) { //Where should this go!
		String activeness = e.getAttribute("active");
		return //activeness != null && 
			(activeness.equals("true")||activeness.equals("active"));
	}
}
