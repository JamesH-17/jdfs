package com.subject17.jdfs.client.net.reciever;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;

import com.subject17.jdfs.client.io.Printer;
import com.subject17.jdfs.client.net.LanguageProtocol;
import com.subject17.jdfs.client.net.PortMgr;
import com.subject17.jdfs.client.settings.PeersHandler;

public class Listener {
	private static int defaultPort = 2718;
	
	protected int port;
	
	/**
	 * @category Constructor
	 * Creates a new listener using {@defaultPort}
	 */
	public Listener(PeersHandler peers) { this(defaultPort, peers); }
	/**
	 * @category Constructor
	 * @param port -- The port Number that this service will listen on
	 */
	public Listener(int targetPort, PeersHandler peers){
		setPort(targetPort);
	}

	public void setPort(int newPort) {port = newPort;}
	public int getPort() {return port;}
	
	public void createListener() {

		ServerSocket servSock;
		Socket handlingSock;
		try {
			servSock = new ServerSocket(port);
			handlingSock = servSock.accept();
			handleSocketAcception(handlingSock);

			handlingSock.close();
			servSock.close();
		} catch(IOException e){
			Printer.log("IO exception: "+e.getMessage());
			Printer.log("Port in use:"+port);
		}
		catch (Exception e) {
			Printer.log("Exception: "+e.getMessage());
			Printer.log("Port in use:"+port);
		}
		finally {
		}
	}
	private void handleSocketAcception(Socket handlingSock) throws IOException {
		BufferedReader userInput = null; 
		PrintWriter output = null;
		BufferedReader fromClient = null;
		try {
			userInput = new BufferedReader(new InputStreamReader(System.in));
			output = new PrintWriter(handlingSock.getOutputStream(), true);
			fromClient = new BufferedReader(new InputStreamReader(handlingSock.getInputStream()));
			
			String serverMsg;
			Printer.log("Connected to client, awaiting SYN");
			
			
			
			handleInitialConnection(fromClient, output, handlingSock) {
				
			}
			do {
				
				output.println("Welcome to mah server!");
				if (serverMsg != null)
					Printer.println(serverMsg);
				
				output.println(userInput.readLine());
			} while(!serverMsg.equals(LanguageProtocol.CLOSE));
			
			Printer.log("Closed connection to client "+handlingSock.getInetAddress());
		}
		catch (Exception e) {throw e;} //Try/catch only to ensure streams are closed
		finally {
			if (userInput != null)
				userInput.close();
			if (output != null)
				output.close();
			if (fromClient != null)
				fromClient.close();
		}
	}
	
	public boolean handleInitialConnection(BufferedReader fromClient, PrintWriter output, Socket handlingSock) throws IOException {
		String clientResponse="", serverResponse = "";
		for (int attempt=0; attempt < 3 ; ++attempt) {
			clientResponse = fromClient.readLine();
			output.print(
				serverResponse = LanguageProtocol.handleResponse(clientResponse)
			);
			
			Printer.log("Client Says:"+clientResponse);
			Printer.log("Responded with:"+serverResponse);
			if (serverResponse.equals(LanguageProtocol.ACK))
				return true;
		}
		return false;
	}

}
