package com.subject17.jdfs.client.settings;

import java.io.IOException;
import java.util.ArrayList;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import com.subject17.jdfs.client.account.UserUtil;

public class SettingsReader extends Settings {

	public SettingsReader() {
		setSettingsFileLocation(defaultSettingsFileName);
	}
	public SettingsReader(String nameOfSettingsFileToUse) {
		setSettingsFileLocation(nameOfSettingsFileToUse);
		//parseAndReadXMLDocument();
	}
	
	public String getSettingsFile() {
		return settingsFileName;
	}
	public String getPeerFileLocation(){return peerFileLocation;}

	public boolean setSettingsFileLocation(String newSettingsFilename) {
		return (newSettingsFilename.equals(settingsFileName)) || ( //Hoping short circuit works here
			setSettingsFile(newSettingsFilename) && parseAndReadXMLDocument() //This may give concurrency issues
		);
	}
	
	protected boolean parseAndReadXMLDocument() {
		try { //I'm really not a fan of being forced to use factories here
			DocumentBuilderFactory docbuilder = DocumentBuilderFactory.newInstance();
			DocumentBuilder parser = docbuilder.newDocumentBuilder();
			Document doc = parser.parse(settingsFileName);
			readXMLDocument(doc);
			
		} catch (Exception e) {
			System.out.print("Error parsing xml document for settings");
			e.printStackTrace();
			return false;
		}
		return true;
	}
	
	public static Document GetDocument(String filePath, String fileName) throws ParserConfigurationException {
		return GetDocument();
	}
	public static Document GetDocument(String fileName) throws ParserConfigurationException, SAXException, IOException {
		DocumentBuilderFactory docbuilder = DocumentBuilderFactory.newInstance();
		DocumentBuilder parser = docbuilder.newDocumentBuilder();
		return parser.parse(fileName);
	}
	
	private void readXMLDocument(Document doc) throws Exception {
		try {
			readUsers(doc);
			readPeersLocation(doc);
		} catch (Exception e) {
			System.out.print("Failed reading one or more settings");
			throw e; 
		} finally {
			;
		}
	}
	
	private void readUsers(Document doc) throws Exception {
		//Nodelist isn't iterable, so we have to use a for loop
		NodeList xmlUsernames = doc.getElementsByTagName("user");
		
		if (xmlUsernames != null) {
			users = new ArrayList<String>();
			for (int i = 0; i < xmlUsernames.getLength(); ++i) { //Sadly, NodeList is not iterable
				Element user = (Element)xmlUsernames.item(i);
				String nameOfUser = user.getNodeValue();
				
				if (UserUtil.isValidUsername(nameOfUser)) {
					users.add(nameOfUser);
					if (userSetToActive(user))
						currentUser = nameOfUser;
				}
			}
			if (users.size() > 0)
				currentUser = users.get(0);
			else throw new Exception("No users found in file, or error accessing class variable users");
		} else throw new Exception("No tag users found in xml document "+doc.getDocumentURI());
	}
	
	private void readPeersLocation(Document doc) {
		//Nodelist isn't iterable, so we have to use a for loop
		NodeList xmlPeerFileLocations = doc.getElementsByTagName("peersFileLocation");
		
		if (xmlPeerFileLocations != null && xmlPeerFileLocations.getLength() > 0) {
			setPeerFile(xmlPeerFileLocations.item(0).getNodeValue());
		}
	}
	
	public static boolean userSetToActive(Element e) { //Where should this go!
		String activeness = e.getAttribute("active");
		return //activeness != null && 
			(activeness.equals("true")||activeness.equals("active"));
	}
}
